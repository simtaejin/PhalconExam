<?php

use Phalcon\Validation;
use Phalcon\Validation\Validator\PresenceOf as PresenceOf;

class Board extends ModelBase
{
    public $idx;
    public $ref_group;
    public $ref_level;
    public $ref_order;
    public $member;
    public $title;
    public $content;
    public $hits;
    public $created;
    public $updated;
    public $temp;


    public function initialize()
    {
        $this->setschema("phalcon_exam");

        $this->allowEmptyStringValues(['title', 'content']);
        //$this->skipAttributes(['idx']);


    }


    public function setSource($source)
    {
        parent::setSource("board_" . $source); // TODO: Change the autogenerated stub
    }

    public function getSource()
    {
        return parent::getSource(); // TODO: Change the autogenerated stub
    }

    public function beforeValidationOnCreate()
    {
        $this->created = date('Y-m-d H:i:s');
    }

    public function validation()
    {
        $validator = new Validation();

        $validator->add(['title', 'content'], new PresenceOf([
            'message' => [
                'title' => 'title을 입력하세요.',
                'content' => 'content을 입력하세요.'
            ],
        ]));

        return $this->validate($validator);
    }

    public function findwithfile($parameters = null)
    {
        $result = parent::find($parameters);

        $temp_array = array();

        $files = new Files();
        $files->setSource("file_boards");

        foreach ($result as $index => $item) {
            $files_data = $files->find(
                [
                    "board_id = :board_id: AND board_idx = :board_idx:" ,
                    "bind" =>["board_id"=>$this->getSource(),"board_idx"=>$item->idx]
                ]
            );

            if ($files_data->count() > 0) {
                foreach ($files_data as $k => $v) {
                    $temp_array[$item->idx][$k]["artifical_name"] = $files_data[$k]->artifical_name;
                }
            } else {
                $temp_array[$item->idx] = "";
            }
        }

        $result->temp = $temp_array;

        return $result;
        //return parent::find($parameters);
    }

    public function setTemp($temp)
    {
        //$this->temp = $this->getSource()." ::::  ".$idx;

        $this->temp = $temp;
    }

    public function getTemp()
    {
        return $this->temp;
    }

}
